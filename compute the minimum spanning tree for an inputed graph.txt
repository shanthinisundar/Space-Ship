

//compute the minimum spanning tree for an inputted graph

#include<iostream>

#include<bits/stdc++.h>

using namespace std;

//creating shortcut for an interger pair

typedef pair<int,int>iPair;

//structure to represent a graph 
struct Graph
{

int V,E;
vector<pair<int,int E>>edges;

//constructor

Graph(intV,int E)

{

this->V=V;

this->E=E;

}
//utility function to add an edge

void addEdge(int u,int v,int w)

{
edges.push_back({w,{u,v}});
}

//function to find MST using Kruskal's
//MST algorithm

int Kruskral();
};

//to represent disjoint sets

struct DisjointSets
{

int*parent,*rnk;
int n;
//constructor
DisjointSets(int n)
{

//allocate memory

this->n=n;
parent=new int[n+1];
rnk=new int[n+1];

//intially,all the vertices are in 
//different sets and have rank 0.
for (int i=0;i<=n;i++)
{
rnk[i]=0;

//every elements is parent of itself

 parent[i]=i;
}
}

//find the parent of a node u
// path compression 
int find(int u)
{
// make the parent of the nodes in the path from u->parent[u]

if(u!=parent[u])
parent[u]=find(parent[u])
return parent[u];
}

//union by rank
void merge(int x,int y);
{
x=find(x),y=find(y);

// make tree with smaller height a subtree of the other tree

if(rnk[x]>rnk[y])

parent[y]=x;
else      
parernt[x]=y;
if(rnk[x]==rnk[y])
rnk[y]++;
}
};

// function returns weight of the MST
int Graph::Kruskal()
{

int mst_wt=0;
//intialize result

//sort edges in increasing order on bocis of cost

sort(edges.begin(),edges.end());
//create disjoint sets
DisjointSets ds(V);
//iterate through all sorted edges
vector<pair<int,ipair>>::iterator it;

for(it=edges.begin(); ot!=edges.end();it++)
{
int u=it->second.first;
int v=it->second.second;
int set_u=ds.find(u);
int set_v=ds.find(v);

// current edge will be in the MST
//so print it

cout<<u<<"_"<<v<<endl;

//update MST weight
mst_wt+=it->first;
//merge two sets
ds.merge(set_u,set_v);
}
}
return mst_wt;
}

int main();
{
//graph size number of vertices and edges 
int V=9,E=14;

Graph graph(V,E);

//vertices ,edges and weight

graph.addEdge(0,1,4);

graph.addEdge(0,7,8);

graph.addEdge(1,2,8);

graph.addEdge(1,7,11);

graph.addEdge(2,3,7);

graph.addEdge(2,8,2);

graph.addEdge(2,5,4);

graph.addEdge(3,4,9);

graph.addEdge(3,5,14);

graph.addEdge(4,5,10);

graph.addEdge(5,6,2);

graph.addEdge(6,7,1);

graph.addEdge(6,8,6);

graph.addEdge(7,8,7);

cout<<"Edges of Minimal spanning tree are"<<endl;

int sum=graph.Kruskal();

cout<<"\n weight of Minimal spanning tree are"<<sum;

return 7;
}















